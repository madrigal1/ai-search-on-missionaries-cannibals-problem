diff --git a/node_modules/force-graph/dist/force-graph.module.js b/node_modules/force-graph/dist/force-graph.module.js
index 55955b8..f27b5db 100644
--- a/node_modules/force-graph/dist/force-graph.module.js
+++ b/node_modules/force-graph/dist/force-graph.module.js
@@ -8,7 +8,7 @@ import Kapsule from 'kapsule';
 import accessorFn from 'accessor-fn';
 import ColorTracker from 'canvas-color-tracker';
 import { forceSimulation, forceLink, forceManyBody, forceCenter, forceRadial } from 'd3-force-3d';
-import { Bezier } from 'bezier-js';
+import Bezier from 'bezier-js';
 import indexBy from 'index-array-by';
 import { scaleOrdinal } from 'd3-scale';
 import { schemePaired } from 'd3-scale-chromatic';
@@ -129,7 +129,7 @@ function _isNativeReflectConstruct() {
   if (typeof Proxy === "function") return true;
 
   try {
-    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
+    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
     return true;
   } catch (e) {
     return false;
@@ -241,19 +241,19 @@ function autoColorObjects(objects, colorByAccessor, colorField) {
   });
 }
 
-function getDagDepths (_ref, idAccessor) {
+function getDagDepths(_ref, idAccessor) {
   var nodes = _ref.nodes,
-      links = _ref.links;
+    links = _ref.links;
 
   var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
-      _ref2$nodeFilter = _ref2.nodeFilter,
-      nodeFilter = _ref2$nodeFilter === void 0 ? function () {
-    return true;
-  } : _ref2$nodeFilter,
-      _ref2$onLoopError = _ref2.onLoopError,
-      onLoopError = _ref2$onLoopError === void 0 ? function (loopIds) {
-    throw "Invalid DAG structure! Found cycle in node path: ".concat(loopIds.join(' -> '), ".");
-  } : _ref2$onLoopError;
+    _ref2$nodeFilter = _ref2.nodeFilter,
+    nodeFilter = _ref2$nodeFilter === void 0 ? function () {
+      return true;
+    } : _ref2$nodeFilter,
+    _ref2$onLoopError = _ref2.onLoopError,
+    onLoopError = _ref2$onLoopError === void 0 ? function (loopIds) {
+      throw "Invalid DAG structure! Found cycle in node path: ".concat(loopIds.join(' -> '), ".");
+    } : _ref2$onLoopError;
 
   // linked graph
   var graph = {};
@@ -267,7 +267,7 @@ function getDagDepths (_ref, idAccessor) {
   });
   links.forEach(function (_ref3) {
     var source = _ref3.source,
-        target = _ref3.target;
+      target = _ref3.target;
     var sourceId = getNodeId(source);
     var targetId = getNodeId(target);
     if (!graph.hasOwnProperty(sourceId)) throw "Missing source node with id: ".concat(sourceId);
@@ -284,13 +284,13 @@ function getDagDepths (_ref, idAccessor) {
   traverse(Object.values(graph));
   var nodeDepths = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(graph).filter(function (_ref4) {
     var _ref5 = _slicedToArray(_ref4, 2),
-        node = _ref5[1];
+      node = _ref5[1];
 
     return !node.skip;
   }).map(function (_ref6) {
     var _ref7 = _slicedToArray(_ref6, 2),
-        id = _ref7[0],
-        node = _ref7[1];
+      id = _ref7[0],
+      node = _ref7[1];
 
     return _defineProperty({}, id, node.depth);
   }))));
@@ -521,19 +521,19 @@ var CanvasForceGraph = Kapsule({
     },
     // ms
     onUpdate: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onFinishUpdate: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onEngineTick: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onEngineStop: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onNeedsRedraw: {
@@ -644,12 +644,12 @@ var CanvasForceGraph = Kapsule({
         visibleLinks.forEach(calcLinkControlPoints); // calculate curvature control points for all visible links
 
         var beforeCustomLinks = [],
-            afterCustomLinks = [],
-            defaultPaintLinks = visibleLinks;
+          afterCustomLinks = [],
+          defaultPaintLinks = visibleLinks;
 
         if (state.linkCanvasObject) {
           var replaceCustomLinks = [],
-              otherCustomLinks = [];
+            otherCustomLinks = [];
           visibleLinks.forEach(function (d) {
             return ({
               before: beforeCustomLinks,
@@ -672,20 +672,20 @@ var CanvasForceGraph = Kapsule({
         ctx.save();
         Object.entries(linksPerColor).forEach(function (_ref) {
           var _ref2 = _slicedToArray(_ref, 2),
-              color = _ref2[0],
-              linksPerWidth = _ref2[1];
+            color = _ref2[0],
+            linksPerWidth = _ref2[1];
 
           var lineColor = !color || color === 'undefined' ? 'rgba(0,0,0,0.15)' : color;
           Object.entries(linksPerWidth).forEach(function (_ref3) {
             var _ref4 = _slicedToArray(_ref3, 2),
-                width = _ref4[0],
-                linesPerLineDash = _ref4[1];
+              width = _ref4[0],
+              linesPerLineDash = _ref4[1];
 
             var lineWidth = (width || 1) / state.globalScale + padAmount;
             Object.entries(linesPerLineDash).forEach(function (_ref5) {
               var _ref6 = _slicedToArray(_ref5, 2);
-                  _ref6[0];
-                  var links = _ref6[1];
+              _ref6[0];
+              var links = _ref6[1];
 
               var lineDashSegments = getLineDash(links[0]);
               ctx.beginPath();
@@ -783,13 +783,13 @@ var CanvasForceGraph = Kapsule({
           var getCoordsAlongLine = bzLine ? function (t) {
             return bzLine.get(t);
           } // get position along bezier line
-          : function (t) {
-            return {
-              // straight line: interpolate linearly
-              x: start.x + (end.x - start.x) * t || 0,
-              y: start.y + (end.y - start.y) * t || 0
+            : function (t) {
+              return {
+                // straight line: interpolate linearly
+                x: start.x + (end.x - start.x) * t || 0,
+                y: start.y + (end.y - start.y) * t || 0
+              };
             };
-          };
           var lineLen = bzLine ? bzLine.length() : Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
           var posAlongLine = startR + arrowLength + (lineLen - startR - endR - arrowLength) * arrowRelPos;
           var arrowHead = getCoordsAlongLine(posAlongLine / lineLen);
@@ -854,11 +854,11 @@ var CanvasForceGraph = Kapsule({
 
             var photonPosRatio = photon.__progressRatio;
             var coords = bzLine ? bzLine.get(photonPosRatio) // get position along bezier line
-            : {
-              // straight line: interpolate linearly
-              x: start.x + (end.x - start.x) * photonPosRatio || 0,
-              y: start.y + (end.y - start.y) * photonPosRatio || 0
-            };
+              : {
+                // straight line: interpolate linearly
+                x: start.x + (end.x - start.x) * photonPosRatio || 0,
+                y: start.y + (end.y - start.y) * photonPosRatio || 0
+              };
             ctx.beginPath();
             ctx.arc(coords.x, coords.y, photonR, 0, 2 * Math.PI, false);
             ctx.fill();
@@ -936,7 +936,7 @@ var CanvasForceGraph = Kapsule({
 
 
     state.forceLayout.stop().alpha(1) // re-heat the simulation
-    .nodes(state.graphData.nodes); // add links (if link force is still active)
+      .nodes(state.graphData.nodes); // add links (if link force is still active)
 
     var linkForce = state.forceLayout.force('link');
 
@@ -989,7 +989,7 @@ var CanvasForceGraph = Kapsule({
   }
 });
 
-function linkKapsule (kapsulePropNames, kapsuleType) {
+function linkKapsule(kapsulePropNames, kapsuleType) {
   var propNames = kapsulePropNames instanceof Array ? kapsulePropNames : [kapsulePropNames];
   var dummyK = new kapsuleType(); // To extract defaults
 
@@ -1125,7 +1125,7 @@ var forceGraph = Kapsule({
 
         function hexIndex(_ref4) {
           var type = _ref4.type,
-              objs = _ref4.objs;
+            objs = _ref4.objs;
           objs.filter(function (d) {
             if (!d.hasOwnProperty('__indexColor')) return true;
             var cur = state.colorTracker.lookup(d.__indexColor);
@@ -1220,11 +1220,11 @@ var forceGraph = Kapsule({
       triggerUpdate: false
     },
     onNodeDrag: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onNodeDragEnd: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onNodeClick: {
@@ -1252,11 +1252,11 @@ var forceGraph = Kapsule({
       triggerUpdate: false
     },
     onZoom: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onZoomEnd: {
-      "default": function _default() {},
+      "default": function _default() { },
       triggerUpdate: false
     },
     onRenderFramePre: {
@@ -1319,7 +1319,7 @@ var forceGraph = Kapsule({
 
       function setCenter(_ref5) {
         var x = _ref5.x,
-            y = _ref5.y;
+          y = _ref5.y;
         state.zoom.translateTo(state.zoom.__baseElem, x === undefined ? getCenter().x : x, y === undefined ? getCenter().y : y);
         state.needsRedraw = true;
       }
@@ -1515,7 +1515,7 @@ var forceGraph = Kapsule({
       }); // prevent freeze while dragging
 
       state.forceGraph.d3AlphaTarget(0.3) // keep engine running at low intensity throughout drag
-      .resetCountdown(); // prevent freeze while dragging
+        .resetCountdown(); // prevent freeze while dragging
 
       state.isPointerDragging = true;
       obj.__dragged = true;
@@ -1538,7 +1538,7 @@ var forceGraph = Kapsule({
 
       delete obj.__initialDragPos;
       state.forceGraph.d3AlphaTarget(0) // release engine low intensity
-      .resetCountdown(); // let the engine readjust after releasing fixed nodes
+        .resetCountdown(); // let the engine readjust after releasing fixed nodes
       // drag cursor
 
       state.canvas.classList.remove('grabbable');
@@ -1596,11 +1596,11 @@ var forceGraph = Kapsule({
 
 
         !state.isPointerDragging && ev.type === 'pointermove' && state.onBackgroundClick // only bother detecting drags this way if background clicks are enabled (so they don't trigger accidentally on canvas panning)
-        && (ev.pressure > 0 || state.isPointerPressed) // ev.pressure always 0 on Safari, so we use the isPointerPressed tracker
-        && (ev.pointerType !== 'touch' || ev.movementX === undefined || [ev.movementX, ev.movementY].some(function (m) {
-          return Math.abs(m) > 1;
-        })) // relax drag trigger sensitivity on touch events
-        && (state.isPointerDragging = true); // update the pointer pos
+          && (ev.pressure > 0 || state.isPointerPressed) // ev.pressure always 0 on Safari, so we use the isPointerPressed tracker
+          && (ev.pointerType !== 'touch' || ev.movementX === undefined || [ev.movementX, ev.movementY].some(function (m) {
+            return Math.abs(m) > 1;
+          })) // relax drag trigger sensitivity on touch events
+          && (state.isPointerDragging = true); // update the pointer pos
 
         var offset = getOffset(container);
         pointerPos.x = ev.pageX - offset.left;
@@ -1611,8 +1611,8 @@ var forceGraph = Kapsule({
 
         function getOffset(el) {
           var rect = el.getBoundingClientRect(),
-              scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
-              scrollTop = window.pageYOffset || document.documentElement.scrollTop;
+            scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
+            scrollTop = window.pageYOffset || document.documentElement.scrollTop;
           return {
             top: rect.top + scrollTop,
             left: rect.left + scrollLeft
@@ -1734,7 +1734,7 @@ var forceGraph = Kapsule({
       state.animationFrameRequestId = requestAnimationFrame(animate);
     })();
   },
-  update: function updateFn(state) {}
+  update: function updateFn(state) { }
 });
 
 export { forceGraph as default };
